------------------------------------------------------------
Lab11 feedback for Gavars Mitch (mag051)
------------------------------------------------------------
prelab: questions: ' (1.1) What is **stack smashing**? (1.2) What is it that makes stack smashing
possible? (1.3) Log in to mips.bucknell.edu and examine the program
example3.c. Do you think the local variable **ret** in the function
**function()** means the same thing (**ret**) as you see in the Stack Smashing
paper that is displayed on the stack? Why or why not? (1.4) Compile the file**
example3.c** to an executable called **example3**. Open this file in **gdb**
as indicated in the **Buffer Overflows** section of the paper and disassemble
the **main()** function. If you open the **example3.c** file in your favorite
text editor, you will see that its contents are very similar to the
corresponding listing in the paper. Explain why the disassembled code looks so
different from what you see in the paper. (1.5) To smash the stack, you need
to know two key values, where is the end of the parameters and local variables
on the stack, and how many bytes to skip after the function is returned. In
our case, we would like the program to skip the instruction **x = 4;** in the
**main()** function. In order to explain the two values in the function
**function()**, you first need to understand what the code **ret =
(int*)(buffer1 + 24); **and** (*ret) += 16;** do. Write your answers in
**prelab.txt**. (1.6) The program structure explained in the Smashing the
Stack paper differs from how our **mips** does things, though the concept is
the same. In the paper, the local variables are arranged from high stack
address value (deeper inside the stack) [(int *ret)] [buffer2][buffer1]. In
our **mips** machine, the arrangement is different. Run **gdb** and
disassemble the function **main()** and **function()**, save these output
(numbered assembly code) into two text files for your reference. Then run the
program in **gdb** and stop at the function **function()**. Examine the
addresses of the local variables, **ret**, **buffer1**, and **buffer2**.
Record these addresses and explain them in your **prelab.txt**. (1.7) Now
explain why the two values 24 and 16 are used in the function **function()**.
(1.8) Describe why when you run **example3** on the **mips** machine the
output is 7 rather than 4.'
	Score: 19 / 25
	Comment: Missing 6, 8 

Exercise 1: * (1.1) Run over1 and enter an input string with more than 10 characters and note what happens. Run over2, enter the same input string you used before, and note any difference in behavior in comparison with the first program. Explain how the buffer overflow risk was eliminated in over2.c.
  * (1.2) Now, run over3 and enter your same input string. Read the source code in over3.c and explain what causes the risk of buffer overflow in this program.
  * (1.3) Consider the flaws you identified in over1.c and over3.c, then generalize from your observations to write a rule of thumb that allows anyone to identify when a system call or library function call will give a program the risk of buffer overflows.
  * (1.4) Comparing over3.c and over4.c, you learn a lesson on how to handle user input to avoid the risk of buffer overflows. Try to state this lesson as clearly as possible.
  * (1.5) Construct a proof-of-concept program called over5.c to show how a certain function can introduce the risk of buffer overflow. The function you choose must be different from those that appeared earlier in this problem. The list that follows offers a few candidates for you to consider: strcat, strcpy, sprintf.
	Score: 10 / 15
	Comment: missing over5.c

Exercise 2: * (2.1) Reading the source code, determine in which segment of memory does each of these five address appear.
  * (2.2) The question is in which order these parameters are pushed onto the stack: from left to right or from right to left? Referring to the assembly code in main, specify how each of the 6 parameters is passed on to function test and note the order in which the parameters that are passed on the stack are pushed onto the stack.
  * (2.3) Your answer to this question should report your best estimate of the address of the first byte containing the return address of test and the method you used to find this information.
  * (2.4) Look at the address that the program reports for variable i. Knowing that it is a 32-bit integer, give the hexadecimal value of each of the 4 individual bytes make up this value (you know that it represents 11, the actual parameter passed from main to test).
  * (2.5) Looking at how the individual bytes that constitute the value of i are stored in memory, determine whether you are in a little endian or in a big endian processor.
  * (2.6) Thinking of how you determined the endian convention of your processor above, describe a strategy you might use in the future to discover what is the endian convention of an arbitrary processor. Your description can be a mixture of C statements and plain English to explain it step-by-step.
  * (2.7) Using the information you gathered so far, draw the stack frame for function test. Your must show the address each component of the stack frame for test, including each of the local variables in the function individually.
  * (2.8) Look at the stack frame diagram you constructed above. Stack smashing uses the lack of array bounds checking in C to force a program to make a jump to an arbitrary address – that is, the address of a piece of code injected into a running program. What data item in the stack frame must be overwritten to make this jump possible?
  * (2.9) For the scenario in this problem up to now: if one injects code into your running program via buffer overflow, into which segment of the program will this end up: text, data, stack, or heap segment?
  * (2.10) You have learned about programs being structured into these four regions or “compartments,” the open question is how the processor deals with their boundaries. Would the processor possibly execute code that is not in the text segment? Would the processor be able to manipulate data stored in the text segment?
  * (2.11) If you precede the declaration of buf with the keyword static, this array will be visible in the scope of function test but it will reside on the data segment of your program rather than on the stack. Make this modification in the program, recompile, and run it. Describe what evidence you find to confirm that buf is now in the data segment. Please do not overwrite your previously saved decode-run.txt file!
  * (2.12) Consider what you observed when you place buf in the data segment of the program. Explain whether it is possible to use a buffer overflow in buf in this situation to force the program to jump to an arbitrary address.
	Score: 25 / 36
	Comment: decode-run.txt not found.

Exercise 3: * (3.1) Analyze the output of this program. In you answers.txt, Explain in your own words what makes concat.c an insecure program.
  * (3.2) Now, also in your answers.txt, try to generalize from the experiences you’ve had in this lab to explain what type of programming “mistake” makes a program vulnerable to stack smashing attacks.
  * (3.3) Adapt concat.c to eliminate, or at least, minimize the risks of stack smashing. Once you have tried your best, make sure to run it through rats again to verify that you managed to improve it.
	Score: 24 / 24
------------------------------------------------------------
TOTAL 78.0 / 100.0
------------------------------------------------------------

